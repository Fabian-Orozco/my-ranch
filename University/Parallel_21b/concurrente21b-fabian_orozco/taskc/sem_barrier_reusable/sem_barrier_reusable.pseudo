/*
procedure main:
  // How many threads have arrived to the barrier
  shared count := 0
  // Protects the increment of the count
  shared can_access_count := create_semaphore(1)
  // Locked (0) until all threads arrive, then it is unlocked (1)
  shared barrier := create_semaphore(0)
  // Read thread count from standard input
  shared constant thread_count = read_integer()
  // Create a thread team running secondary
  create_threads(thread_count, secondary)
end procedure

procedure secondary:
  Statement A
  // Adapt rendezvous solution here
  // Statement B can be only executed until all threads have run Statement A
  Statement B
end procedure

Todos los hilos creados deben ejecutar A antes de ejecutar B
*/

procedure main:
  // How many threads have arrived to the barrier
  shared count := 0
  // Protects the increment of the count
  shared can_access_count := create_semaphore(1)
  // Locked (0) until all threads arrive, then it is unlocked (1)
  shared barrier := create_semaphore(0)
  // Read thread count from standard input
  shared constant thread_count = read_integer()
  // Create a thread team running secondary
  create_threads(thread_count, secondary)
end procedure

procedure secondary:
while true do
  Statement A
  // Adapt rendezvous solution here
  // Statement B can be only executed until all threads have run Statement A
  wait(can_access_count)
    count := count + 1
    if (count = thread_count) then // ya llegó el último hilo (ya ejecutó A)
      signal(barrier)
      count := 0
    end if
  signal(can_access_count)
  wait(barrier)
  signal(barrier) // método del torniquete.
  
  wait(barrier)
  Statement B
end procedure