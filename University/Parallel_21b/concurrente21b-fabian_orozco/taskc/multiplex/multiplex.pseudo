/*
Modifique la solución a la actividad Actividad 17 [sem_mutex_sym] para que permita un límite superior de n threads ejecutando la sección crítica. A este patrón se le llama multiplex y es útil para problemas donde se tienen distintos entes trabajando al mismo tiempo pero con máximo de capacidad.

Por ejemplo, la cantidad de cajeros atendiendo en las ventanillas de un banco o de clientes patinando en la pista del salón de patines. En este último caso, si la capacidad de la pista se agota, algunos clientes tendrán que esperar afuera, y apenas un cliente sale de la pista, otro podrá ingresar de inmediato. Use el código siguiente para reflejar este comportamiento.

procedure main:
  shared constant skater_count = read_integer()
  create_threads(thread_count, secondary)
end procedure

procedure secondary:
  // Bounded waiting
  skate()
end procedure
*/


procedure main:
  shared constant skater_count = read_integer() // 200
  shared constant skater_capacity = read_integer() // 50
  shared can_skate := create_semaphore(skater_capacity) // mutex ampliado
  create_threads(thread_count, secondary)
end procedure

procedure secondary:
  // Bounded waiting
  wait(can_skate)
  skate()
  signal(can_skate)
end procedure
