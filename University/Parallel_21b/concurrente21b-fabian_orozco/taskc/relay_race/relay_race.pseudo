procedure main(argc, argv[]):
  if argc = 4 then
    shared team_count := integer(argv[1])
    shared stage1_delay := integer(argv[2])
    shared stage2_delay := integer(argv[3])
    shared position := 0

    // usando interfaz barrier
    shared start_barrier := create_barrier(team_count) // se abre hasta que todos los equipos están en la linea de salida.
    shared batons := create_semaphores(team_count,0) // un semáforo por equipo. retorna arreglo

    shared finish_mutex := create_mutexes(1) // solo un mutex inicializado en 1

    for team := 0 to team_count do
      create_thread(run_stage1, team) // corredor de la etapa1
      create_thread(run_stage2, team) // corredor de la etapa2
    end for
  else
    print "usage: relay_race team_count stage1_delay stage2_delay"
  end if
end procedure

procedure run_stage1(team_number):
  // Espera a que lleguen todos los equipos
  wait(start_barrier) // se levanta cuando hayan llegado team_count hilos.
  delay(stage1_delay)

  // Le da la estafeta al compañero
  signal(batons[team_number])
end function

procedure run_stage2(team_number):
  // Espera hasta que el compañero le entregue la estafeta.
  wait(batons[team_number])
  delay(stage2_delay)

  // me adueño de la meta
  wait(finish_mutex)
  declare constant my_team_position = ++position
  if my_team_position <= 3 then
    print('Place ', my_team_position, ': team ', team_number)
  end if

  // libero la meta
  signal(finish_mutex)
end procedure